<?php namespace ProcessWire;

class ListerProActionLimit extends WireData implements Module {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Lister Pro Action Limit',
			'summary' => 'Allows a numerical limit to be set for how many pages within Lister Pro results will have an action applied to them.',
			'version' => '0.1.1',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/ListerProActionLimit',
			'icon' => 'compress',
			'autoload' => true,
			'requires' => 'ProcessWire>=3.0.0, PHP>=5.4.0, ProcessPageListerPro',
		);
	}

	/**
	 * Init
	 */
	public function init() {
		$this->addHookBefore('ProcessPageListerPro::executeActions', $this, 'beforeExecuteActions');
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookBefore('ProcessPageListerPro::execute', $this, 'beforeListerProExecute');
		$this->addHookAfter('InputfieldSelector::render', $this, 'afterInputfieldSelectorRender');
		$this->addHookAfter('ProcessPageLister::getSelector', $this, 'afterGetSelector');
		$this->addHookAfter('ProcessController::execute', $this, 'addLateAssets');
	}

	/**
	 * Before ListerProActions::executeActions
	 *
	 * @param HookEvent $event
	 */
	protected function beforeExecuteActions(HookEvent $event) {
		/** @var ProcessPageListerPro $lister */
		$lister = $event->object;
		$selector_str = $lister->getSelector();
		$selectors = new Selectors($selector_str);
		// Get total will only be present if it was set by this module
		$s_get_total = $selectors->get("field=get_total");
		if(!$s_get_total || $s_get_total->value != 0) return;
		// Get the page IDs up to the limit
		$ids = $this->wire()->pages->findIDs($selector_str);
		// Set the IDs in CSV format to actions_items in POST (as if they had been individually selected)
		if($ids) $this->wire()->input->post->actions_items = implode(',', $ids);
	}

	/**
	 * Before ProcessPageListerPro::execute
	 *
	 * @param HookEvent $event
	 */
	protected function beforeListerProExecute(HookEvent $event) {
		/** @var ProcessPageListerPro $pplp */
		$pplp = $event->object;
		// Return early if AJAX
		if($this->wire()->config->ajax) return;
		// Remove actions_limit from selector so InputfieldSelector doesn't try to include it
		$selector_str = $pplp->sessionGet('selector');
		$selectors = new Selectors($selector_str);
		$s_actions_limit = $selectors->get("field=actions_limit");
		if($s_actions_limit) $selectors->remove($s_actions_limit);
		$pplp->sessionSet('selector', (string) $selectors);
	}

	/**
	 * After InputfieldSelector::render
	 *
	 * @param HookEvent $event
	 */
	protected function afterInputfieldSelectorRender(HookEvent $event) {
		if($this->wire()->process != 'ProcessPageListerPro') return;
		/** @var InputfieldSelector $inputfield */
		$inputfield = $event->object;
		if($inputfield->name !== 'filters') return;
		// Add action limit input
		$event->return .= <<<EOT
<div class="lpal-wrap">
	<label id="lpal-action-limit-label" for="lpal-action-limit" class="collapsed">Action limit...</label>
	<input type="number" min="0" id="lpal-action-limit" class="uk-input no-auto-change">
</div>
EOT;
	}

	/**
	 * After ProcessPageLister::getSelector
	 *
	 * @param HookEvent $event
	 */
	protected function afterGetSelector(HookEvent $event) {
		/** @var ProcessPageListerPro $lister */
		$lister = $event->object;
		$selector_str = $event->return;
		$selectors = new Selectors($selector_str);
		// Get limit selector (should always be present but not 100% reliable)
		$s_limit = $selectors->get("field=limit");
		if(!$s_limit) {
			$s_limit = new SelectorEqual('limit', 25);
			$selectors->add($s_limit);
		};
		// Get actions_limit selector
		$s_actions_limit = $selectors->get("field=actions_limit");
		if(!$s_actions_limit || !ctype_digit($s_actions_limit->value)) return;
		// Set limit from actions_limit selector value
		$s_limit->value = (int) $s_actions_limit->value;
		// Convert actions_limit selector into "get_total=0"
		$s_actions_limit->field = 'get_total';
		$s_actions_limit->value = 0;
		// Force total to update
		$lister->cacheTotal = false;
		// Return the modified selector
		$event->return = (string) $selectors;
	}

	/**
	 * After ProcessController::execute
	 * Add assets late - deliberately after InputfieldSelector.js
	 *
	 * @param HookEvent $event
	 */
	protected function addLateAssets(HookEvent $event) {
		if($this->wire()->process != 'ProcessPageListerPro') return;
		$config = $this->wire()->config;
		$info = $this->getModuleInfo();
		$version = $info['version'];
		$config->styles->add($config->urls->{$this} . "{$this}.css?v={$version}");
		$config->scripts->add($config->urls->{$this} . "{$this}.js?v={$version}");
	}

}
