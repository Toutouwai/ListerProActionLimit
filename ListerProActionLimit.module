<?php namespace ProcessWire;

class ListerProActionLimit extends WireData implements Module {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Lister Pro Action Limit',
			'summary' => 'Allows a numerical limit to be set for how many pages within Lister Pro results will have an action applied to them.',
			'version' => '0.1.3',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/ListerProActionLimit',
			'icon' => 'compress',
			'autoload' => true,
			'requires' => 'ProcessWire>=3.0.0, PHP>=5.4.0, ProcessPageListerPro',
		);
	}

	/**
	 * Init
	 */
	public function init() {
		// For Lister Pro
		$this->addHookMethod('ProcessPageListerPro::executeActionLimitIds', $this, 'executeActionLimitIds');
		// For Lister Selector
		$this->addHookMethod('ProcessListerSelector::executeActionLimitIds', $this, 'executeActionLimitIds');
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookBefore('ProcessPageListerPro::execute', $this, 'beforeListerProExecute');
		$this->addHookAfter('ListerProActions::buildActionsForm', $this, 'afterBuildActionsForm');
	}

	/**
	 * Get the page IDs that are within the action limit
	 *
	 * @param ProcessPageListerPro $lister
	 * @param int $action_limit
	 * @return array
	 */
	protected function getActionLimitIds(ProcessPageListerPro $lister, $action_limit) {
		if(!$action_limit) return [];
		$selector_str = $lister->getSelector();
		// Parse selector string into Selectors object
		$selectors = new Selectors($selector_str);
		// Set limit to $action_limit
		$s_limit = $selectors->get('field=limit');
		if($s_limit) {
			$s_limit->value = $action_limit;
		} else {
			$s_limit = new SelectorEqual('limit', $action_limit);
			$selectors->add($s_limit);
		}
		$s_start = new SelectorEqual('start', 0);
		$selectors->add($s_start);
		// Return the array of page IDs
		return $this->wire()->pages->findIDs($selectors);
	}

	/**
	 * ProcessPageListerPro|ProcessListerSelector::executeActionLimitIds
	 * Send page IDs in AJAX response
	 *
	 * @param HookEvent $event
	 */
	protected function executeActionLimitIds(HookEvent $event) {
		if($this->wire()->config->ajax) {
			/** @var ProcessPageListerPro $lister */
			if($event->object == 'ProcessListerSelector') {
				$lister = $event->object->lister;
			} else {
				$lister = $event->object;
			}
			$action_limit = $this->wire()->input->get->int('action_limit');
			$ids = $this->getActionLimitIds($lister, $action_limit);
			$event->return = json_encode($ids);
		} else {
			$event->return = 'This method can only be accessed via AJAX.';
		}
	}

	/**
	 * Before ProcessPageListerPro::execute
	 * Add CSS and JS
	 *
	 * @param HookEvent $event
	 */
	protected function beforeListerProExecute(HookEvent $event) {
		$config = $this->wire()->config;
		$info = $this->getModuleInfo();
		$version = $info['version'];
		$config->scripts->add($config->urls->{$this} . "{$this}.js?v={$version}");
	}

	/**
	 * After ListerProActions::buildActionsForm
	 * Add action limit input
	 *
	 * @param HookEvent $event
	 */
	protected function afterBuildActionsForm(HookEvent $event) {
		/** @var InputfieldForm $form */
		$form = $event->return;
		$modules = $this->wire()->modules;
		$f_actions_items = $form->getChildByName('actions_items');
		if(!$f_actions_items) return;

		/** @var InputfieldInteger $f */
		$f = $modules->get('InputfieldInteger');
		$f->name = 'action_limit';
		$f->id = 'lpal-action-limit';
		$f->label = $this->_('Action limit');
		$f->description = $this->_('Limit the selected action(s) to the first n items in the Lister results.');
		$f->inputType = 'number';
		$form->insertBefore($f, $f_actions_items);
	}

}
